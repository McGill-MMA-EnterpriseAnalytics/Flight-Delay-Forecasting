# -*- coding: utf-8 -*-
"""predict arrival script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13hMxLzmQahLYwAuBJisY5mfV_FhU_ISJ
"""

# predict_arrival_model.py

import os
import subprocess
import argparse
import pandas as pd
import numpy as np
import joblib
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder

# Function to install a package if not already installed
def install(package):
    subprocess.check_call(['pip', 'install', package])

def main(args):
    # Install required libraries
    install('pandas')
    install('numpy')
    install('scikit-learn')
    install('joblib')

    # Load the trained model
    model_path = args.model_path
    final_model = joblib.load(model_path)

    # Load new unseen data
    new_data = pd.read_csv(args.new_data_path)

    # Preprocessing - must match training pipeline exactly
    important_cols = ['FL_DATE', 'AIRLINE', 'ORIGIN', 'DEST', 'CRS_DEP_TIME', 'DISTANCE']
    new_data = new_data.dropna(subset=important_cols)

    # Feature Engineering
    new_data['CRS_DEP_HOUR'] = new_data['CRS_DEP_TIME'] // 100
    new_data['CRS_DEP_MINUTE'] = new_data['CRS_DEP_TIME'] % 100
    new_data['CRS_ARR_HOUR'] = new_data['CRS_ARR_TIME'] // 100
    new_data['CRS_ARR_MINUTE'] = new_data['CRS_ARR_TIME'] % 100

    new_data['FL_DATE'] = pd.to_datetime(new_data['FL_DATE'])
    new_data['DAY_OF_WEEK'] = new_data['FL_DATE'].dt.dayofweek
    new_data['MONTH'] = new_data['FL_DATE'].dt.month
    new_data['DAY'] = new_data['FL_DATE'].dt.day

    new_data['DISTANCE_BIN'] = pd.qcut(new_data['DISTANCE'], q=5, labels=False)

    # Drop unused columns
    drop_cols = ['CRS_DEP_TIME', 'CRS_ARR_TIME', 'FL_DATE', 'DISTANCE']
    new_data.drop(columns=[col for col in drop_cols if col in new_data.columns], inplace=True)

    # Encode categoricals
    categorical_cols = new_data.select_dtypes(include=['object']).columns.tolist()
    for col in categorical_cols:
        le = LabelEncoder()
        new_data[col] = le.fit_transform(new_data[col].astype(str))

    # Impute missing
    imputer = SimpleImputer(strategy='mean')
    X_new = imputer.fit_transform(new_data)

    # Predict
    predictions = final_model.predict(X_new)
    prediction_probs = final_model.predict_proba(X_new)[:, 1]

    # Save predictions
    output = pd.DataFrame({
        'prediction_label': predictions,
        'prediction_score': prediction_probs
    })

    output_filename = 'arrival_delay_predictions.csv'
    output.to_csv(output_filename, index=False)

    print(f"Predictions saved as {output_filename}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--model_path', type=str, required=True)
    parser.add_argument('--new_data_path', type=str, required=True)
    args = parser.parse_args()

    main(args)