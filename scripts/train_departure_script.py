# -*- coding: utf-8 -*-
"""train departure script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17xfW8zb3QP6Zbb9TnlBq444ymvK4X5AU
"""

# train_departure_model.py

import os
import subprocess
import argparse
import pandas as pd
import numpy as np
import zipfile
from pycaret.classification import setup, compare_models, stack_models, finalize_model, save_model

# Function to install a package if not already installed
def install(package):
    subprocess.check_call(['pip', 'install', package])

def main(args):
    # Install required libraries
    install('kaggle')
    install('pycaret')
    install('pandas')
    install('scikit-learn')

    from kaggle.api.kaggle_api_extended import KaggleApi

    # Authenticate Kaggle
    os.environ['KAGGLE_CONFIG_DIR'] = os.path.dirname(args.kaggle_json_path)

    api = KaggleApi()
    api.authenticate()

    # Download dataset
    print("Downloading Kaggle dataset...")
    api.dataset_download_files('patrickzel/flight-delay-and-cancellation-dataset-2019-2023', path='.', unzip=False)

    # Unzip
    print("Unzipping dataset...")
    with zipfile.ZipFile('flight-delay-and-cancellation-dataset-2019-2023.zip', 'r') as zip_ref:
        zip_ref.extractall('.')

    # Load data
    df = pd.read_csv('flights_sample_3m.csv')

    # Subset for faster processing
    df = df.sample(n=300000, random_state=42).reset_index(drop=True)

    # Clean missing
    important_cols = ['FL_DATE', 'AIRLINE', 'ORIGIN', 'DEST', 'CRS_DEP_TIME', 'DISTANCE']
    df = df.dropna(subset=important_cols)

    # Create Target
    df['IS_DELAYED'] = (df['DEP_DELAY'] > 15).astype(int)

    # Drop leakage columns
    leakage_cols = [
        'DEP_TIME', 'DEP_DELAY', 'TAXI_OUT', 'WHEELS_OFF', 'WHEELS_ON',
        'TAXI_IN', 'ARR_TIME', 'ARR_DELAY', 'ELAPSED_TIME', 'AIR_TIME',
        'CANCELLED', 'CANCELLATION_CODE', 'DIVERTED',
        'DELAY_DUE_CARRIER', 'DELAY_DUE_WEATHER', 'DELAY_DUE_NAS', 'DELAY_DUE_SECURITY', 'DELAY_DUE_LATE_AIRCRAFT'
    ]
    df.drop(columns=[col for col in leakage_cols if col in df.columns], inplace=True)

    print(f"Columns after dropping leakage: {df.columns.tolist()}")

    # Setup PyCaret
    clf_setup = setup(
        data=df,
        target='IS_DELAYED',
        session_id=42,
        ignore_features=['FL_DATE'],
        fold_strategy='stratifiedkfold',
        fold=3,
        use_gpu=True,
        fix_imbalance=True,
        verbose=False
    )

    # Compare and select top 3 models
    base_models = compare_models(
        include=['lr', 'xgboost', 'lightgbm', 'rf', 'et'],
        n_select=3,
        sort='F1'
    )

    # Stack models
    stacked_model = stack_models(base_models)

    # Finalize model
    final_model = finalize_model(stacked_model)

    # Save model
    save_model(final_model, 'stacked_departure_delay_model')
    print("\u2705 Model saved successfully as 'stacked_departure_delay_model.pkl'")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--kaggle_json_path', type=str, required=True)
    args = parser.parse_args()

    main(args)